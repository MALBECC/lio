#-*- mode: make -*-
################################################################################
#
# Copyright 1993-2006 NVIDIA Corporation.  All rights reserved.
#
# NOTICE TO USER:
#
# This source code is subject to NVIDIA ownership rights under U.S. and
# international Copyright laws.
#
# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE
# CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR
# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL,
# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
# OR PERFORMANCE OF THIS SOURCE CODE.
#
# U.S. Government End Users.  This source code is a "commercial item" as
# that term is defined at 48 C.F.R. 2.101 (OCT 1995), consisting  of
# "commercial computer software" and "commercial computer software
# documentation" as such terms are used in 48 C.F.R. 12.212 (SEPT 1995)
# and is provided to the U.S. Government only as a commercial end item.
# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through
# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the
# source code with only those rights set forth herein.
#
################################################################################
#
# Common build script
#
################################################################################

#.SUFFIXES : .cu .cu_dbg_o .c_dbg_o .cpp_dbg_o .cu_rel_o .c_rel_o .cpp_rel_o .cubin

# Basic directory setup for SDK
# (override directories only if they are not already defined)
ROOTDIR    ?= $(CUDA_HOME)/cuda

# Compilers
ARCHFLAGS	 :=

# Includes
INCLUDES  += -I. -I$(CUDA_HOME)/include -I$(LIBXC_INCLUDES)


# Libs
CUDA_LDFLAGS    := -L$(CUDA_HOME)/lib64/stubs -L$(CUDA_HOME)/lib64 -L$(CUDA_HOME)/lib

# Warning flags
CXXWARN_FLAGS := \
	-W -Wall \
	-Wswitch \
	-Wformat \
	-Wchar-subscripts \
	-Wparentheses \
	-Wmultichar \
	-Wtrigraphs \
	-Wpointer-arith \
	-Wcast-align \
	-Wreturn-type \
	-Wno-unused-function \
	$(SPACE)

CWARN_FLAGS := $(CXXWARN_FLAGS) \
	-Wstrict-prototypes \
	-Wmissing-prototypes \
	-Wmissing-declarations \
	-Wnested-externs \
	-Wmain \

# Compiler-specific flags
NVCCFLAGS   := $(ARCHFLAGS) --compiler-options -fPIC --compiler-options -Wall
ifeq ($(intel),0)
  CXXFLAGS    += $(CXXWARN_FLAGS)
endif

# Common flags
NVCCFLAGS += $(INCLUDES) -DUNIX -D_FORCE_INLINES
CXXFLAGS  += $(INCLUDES) -DUNIX

ifeq ($(profile),1)
	NVCCFLAGS += --compiler-options -pg
endif

ifeq ($(regcount),1)
  NVCCFLAGS += --ptxas-options=-v
endif

ifeq ($(non_optimize), 1)
  OPTIMIZE := -O0
else
  OPTIMIZE := -O3
endif

# Debug/release configuration
NVCCDBGFLAGS  :=
NVCCAINTFLAGS :=
ifeq ($(dbg),1)
  NVCCDBGFLAGS  += -O1 --debug --device-debug --generate-line-info
  NVCCAINTFLAGS += -O3 --compiler-options -fno-strict-aliasing
else
  NVCCFLAGS   += -O3 --compiler-options -fno-strict-aliasing
endif

ifneq ($(cpu),0)
  NVCCFLAGS += -DCPU_KERNELS=1
endif

ifeq ($(ptx),1)
  NVCCFLAGS += --ptx
endif
################################################################################
# Check for input flags and set compiler flags appropriately
################################################################################
ifneq ($(fastmath), 0)
  NVCCFLAGS += -use_fast_math
endif

# Add common flags
NVCCFLAGS += $(COMMONFLAGS)

# Add NVCC Compiler Flags
NVCCFLAGS += --linker-options -fPIC #--verbose

ifeq ($(verbose),1)
  NVCCFLAGS += --verbose
endif

# Fermi, requires CUDA <= 8
GENCODE_SM20    := -gencode arch=compute_20,code=compute_20
GENCODE_SM20    += -gencode arch=compute_20,code=sm_20
# Kepler, requires CUDA >= 5
GENCODE_SM30    := -gencode arch=compute_30,code=sm_30
GENCODE_SM35    := -gencode arch=compute_35,code=sm_35
# Maxwell, requires CUDA >= 6.5
GENCODE_SM50    := -gencode arch=compute_50,code=sm_50
GENCODE_SM52    := -gencode arch=compute_52,code=sm_52
# Pascal, requires CUDA >= 8
GENCODE_SM60    := -gencode arch=compute_60,code=sm_60
GENCODE_SM61    := -gencode arch=compute_61,code=sm_61

# If specific architecture is active, then compile for that.
ifeq ($(sm20),1)
  GENCODE_FLAGS   += $(GENCODE_SM20)
endif
ifeq ($(sm30),1)
  GENCODE_FLAGS   += $(GENCODE_SM30)
endif
ifeq ($(sm35),1)
  GENCODE_FLAGS   += $(GENCODE_SM35)
endif
ifeq ($(sm50),1)
  GENCODE_FLAGS   += $(GENCODE_SM50)
endif
ifeq ($(sm52),1)
  GENCODE_FLAGS   += $(GENCODE_SM52)
endif
ifeq ($(sm60),1)
  GENCODE_FLAGS   += $(GENCODE_SM60)
endif
ifeq ($(sm61),1)
  GENCODE_FLAGS   += $(GENCODE_SM61)
endif

GENCODE_FLAGS   ?= $(GENCODE_SM20) $(GENCODE_SM30) $(GENCODE_SM35)
NVCCFLAGS += $(GENCODE_FLAGS)

ifneq ($(subscript_warn),1)
  NVCCFLAGS += -Xcudafe "--diag_suppress=subscript_out_of_range"
endif

################################################################################
# Libxc flags
################################################################################
ifeq ($(libxc),1)
    #LIBXC CPU MODE
    NVCCFLAGS += -DUSE_LIBXC=1 -DLIBXC_CPU=1
    INCLUDES  += -I$(LIBXC_INCLUDES)
    CUDA_LDFLAGS += -L$(LIBXC_LIBS) -lxc
else
ifeq ($(libxc),2)
#LIBXC GPU MODE
    NVCCFLAGS += -DUSE_LIBXC=1 -DLIBXC_CPU=0
    INCLUDES  += -I$(LIBXC_INCLUDES)
    CUDA_LDFLAGS += -L$(LIBXC_LIBS) -lxc_cuda
else
#NO LIBXC
    NVCCFLAGS += -DUSE_LIBXC=0 -DLIBXC_CPU=1
endif
endif

################################################################################
# Rules
################################################################################

## Unified GPU Object
UGO          := cuda/lio_gpu.o
CUDA_OBJ     :=

POINTXC_SRC  := $(wildcard pointxc/*.cpp)
POINTXC_OBJ  := $(POINTXC_SRC:%.cpp=%.o)
CUDA_OBJ     += $(POINTXC_OBJ)

CUDA_SOURCES := $(wildcard cuda/*.cu)
CUDA_SOURCES += $(wildcard analytic_integral/cuda/*.cu)
CUDA_OBJ     += $(CUDA_SOURCES:%.cu=%.o)

# Commented should be in config file
# CC=icc
# CXX=icc
$(UGO): $(CUDA_OBJ)
	nvcc $(NVCCFLAGS) -dlink $(CUDA_OBJ) -o $@

pointxc/%.o:pointxc/%.cpp
	nvcc $(NVCCFLAGS) -o $@ -dc $<

cuda/%.o:cuda/%.cu
	nvcc $(NVCCFLAGS) $(NVCCDBGFLAGS) -o $@ -dc $<

analytic_integral/cuda/%.o:analytic_integral/cuda/%.cu
	nvcc $(NVCCFLAGS) $(NVCCAINTFLAGS) -o $@ -dc $<
