#!/usr/bin/env python

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>

import fileinput
import os
import re
import shutil
import signal
import subprocess
import sys
import tempfile

remote, url = sys.argv[1:]

def call(cmd, cwd=os.getcwd(), save_output=True):
    if save_output:
        proc = subprocess.Popen(cmd.split(" "), stdout=subprocess.PIPE, cwd=cwd)
        stdout, stderr = proc.communicate()
        return stdout, stderr, proc.returncode
    else:
        proc = subprocess.Popen(cmd.split(" "), cwd=cwd)
        proc.wait()
        return None, None, proc.returncode

class GitRepo(object):
    def __init__(self, directory):
        dir = os.path.abspath(directory)
        cwd, _, pid = call("git rev-parse --show-toplevel".format(directory))

        if pid != 0:
            print "Not in a git repo: {}".format(cwd)
            sys.exit(1)

        self.cwd = cwd.strip()

    def get_cwd(self):
        return self.cwd

    def make_clean_copy(self):
        cleandir = tempfile.mkdtemp()
        cleansubdir = os.path.join(cleandir,"repo")
        shutil.copytree(self.cwd, cleansubdir)
        call("git reset --hard HEAD", cwd=cleansubdir)
        call("git clean -d -f", cwd=cleansubdir)
        return cleansubdir

repo = GitRepo(".")

for line in sys.stdin.readlines():
    local_ref, local_sha, remote_ref, remote_sha = line.split(" ")
    if re.search("master$", remote_ref):
        tmpdir = repo.make_clean_copy()
        call("make clean", cwd=tmpdir, save_output=False)
        _, _, pid = call("make -j3 cpu=1 time=1", cwd=tmpdir, save_output=False)
        if pid != 0:
            print "\033[1;31mError! Fallo la compilacion de LIO ergo no se debe pushear a master\033[0m"
            sys.exit(1)

        _, _, pid = call("python test/run_tests.py --filter_rx aguaCPU", cwd=tmpdir, save_output=False)
        if pid != 0:
            print "\033[1;31mError! Los tests de CPU no pasan!\033[0m"
            sys.exit(1)

sys.exit(0)
